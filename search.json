[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Supermarket list",
    "section": "",
    "text": "Add items to your supermarket list.\n\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 420\n\nimport shinyswatch\nfrom htmltools import css\nfrom shiny import App, module, reactive, render, ui\n\napp_ui = ui.page_fixed(\n    {\"class\": \"my-5\"},\n    shinyswatch.theme.superhero(),\n    ui.panel_title(\"Supermarket list\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_text(\"todo_input_text\", \"\", placeholder=\"Item\"),\n            ui.input_action_button(\"add\", \"Add\"),\n        ),\n        ui.panel_main(\n            ui.output_text(\"cleared_tasks\"),\n            ui.div(id=\"tasks\", style=\"margin-top: 0.5em\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n    finished_tasks = reactive.Value(0)\n    task_counter = reactive.Value(0)\n\n    @output\n    @render.text\n    def cleared_tasks():\n        return f\"Items bought: {finished_tasks()}\"\n\n    @reactive.Effect\n    @reactive.event(input.add)\n    def add():\n        counter = task_counter.get() + 1\n        task_counter.set(counter)\n        id = \"task_\" + str(counter)\n        ui.insert_ui(\n            selector=\"#tasks\",\n            where=\"beforeEnd\",\n            ui=task_ui(id),\n        )\n\n        finish = task_server(id, text=input.todo_input_text())\n\n        # Defining a nested reactive effect like this might feel a bit funny but it's the\n        # correct pattern in this case. We are reacting to the `finish`\n        # event within the `add` closure, so nesting the reactive effects\n        # means that we don't have to worry about conflicting with\n        # finish events from other task elements.\n        @reactive.Effect\n        @reactive.event(finish)\n        def iterate_counter():\n            finished_tasks.set(finished_tasks.get() + 1)\n\n        ui.update_text(\"todo_input_text\", value=\"\")\n\n\n# Modules to define the rows\n\n\n@module.ui\ndef task_ui():\n    return ui.output_ui(\"button_row\")\n\n\n@module.server\ndef task_server(input, output, session, text):\n    finished = reactive.Value(False)\n\n    @output\n    @render.ui\n    def button_row():\n        button = None\n        button = ui.input_action_button(\"finish\", \"Done\", class_=\"btn-default\") if not finished() else ui.input_action_button(\"clear\", \"Clear\", class_=\"btn-warning\") \n        return ui.row(\n            ui.column(4, button),\n            ui.column(8, text),\n            class_=\"mt-3 p-3 border align-items-center\",\n            style=css(text_decoration=\"line-through\" if finished() else None),\n        )\n\n    @reactive.Effect\n    @reactive.event(input.finish)\n    def finish_task():\n        finished.set(True)\n\n    @reactive.Effect\n    @reactive.event(input.clear)\n    def clear_task():\n        ui.remove_ui(selector=f\"div#{session.ns('button_row')}\")\n\n        # Since remove_ui only removes the HTML the reactive effects will be held\n        # in memory unless they're explicitly destroyed. This isn't a big\n        # deal because they're very small, but it's good to clean them up.\n        finish_task.destroy()\n        clear_task.destroy()\n\n    # Returning the input.finish button to the parent scope allows us\n    # to react to it in the parent context to keep track of the number of\n    # completed tasks.\n    #\n    # This is a good pattern because it makes the module more general.\n    # The same module can be used by different applications which may\n    # do different things when the task is completed.\n    return input.finish\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a personal project to learn how to embed Shinylive (Shiny + WebAssembly) in a Quarto document. It is almost the exact copy of the Todo List example (see the code) by Gordon Shotwell.\nFor any question or comment, contact me on Twitter: @alonsosilva"
  }
]